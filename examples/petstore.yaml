openapi: 3.0.0
servers:
    - url: https://proof-service.next.id/v1
      description: production server
    - url: https://proof-service.nextnext.id/v1
      description: staging server
    - url: https://proof-service.next.id/v1
      description: production server
    - url: https://proof-service.nextnext.id/v1
      description: staging server
info:
    description: |
        This is a sample server Proof Service and KV Service.

    version: 1.0.0
    title:
    termsOfService: "http://swagger.io/terms/"
    contact:
        name: API Support
        email: apiteam@swagger.io
        url: https://github.com/Redocly/redoc
    x-logo:
        url: "https://redocly.github.io/redoc/petstore-logo.png"
        altText: Petstore logo
    license:
        name: Apache 2.0
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"
externalDocs:
    description: Find out how to create Github repo for your OpenAPI spec.
    url: "https://github.com/Rebilly/generator-openapi-repo"
tags:
    - name: ps
      description: Everything about Proof Service
      x-displayName: Proof Service
    - name: ks
      description: Everything about KV Service
      x-displayName: KV Service
x-tagGroups:
    - name: General
      tags:
          - ps
          - ks
paths:
    /proof/payload:
        post:
            tags:
                - ps
            summary: Generate a proof payload
            description: Generate a proof payload for signature and post
            operationId: proofPayload
            responses:
                "400":
                    description: Invalid Params
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SignatureProofPayloadResponse"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SignatureProofPayload"
                description: the message payload need to sign
                required: true
    /proof:
        post:
            tags:
                - ps
            summary: Create a proof modification
            description: Create a proof modification
            operationId: uploadProof
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PostProofPayload"
                description: the message payload need to sign
                required: true
            responses:
                "201":
                    description: Request submitted successfully.
                "400":
                    description: Request failed.

        get:
            tags:
                - ps
            summary: Query proof
            description: >-
                Query proof
            operationId: getProofs
            parameters:
                - name: platform
                  in: query
                  description: Proof platform. If not given, all platforms will be searched.
                  required: false
                - name: identity
                  in: query
                  description: Identity on target platform. Separate identities with comma (`,`) if you want to query mutipe identity at once.
                  required: true
                - name: page
                  in: query
                  description: Pagination. First page is number `1`.
                  required: false
                  style: form
                - name: exact
                  in: query
                  description: Boolean Exact match or not. Defaults to `false`.
                  required: false
                  style: form
                - name: sort
                  in: query
                  description: Could be `activated_at`. Set this to `activated_at` to make avatar results sorted by last activation time.
                  required: false
                  style: form
                - name: order
                  in: query
                  description: Could be `asc` or `desc` for sorting. Defaults to `desc`.
                  required: false
                  style: form
            responses:
                "400":
                    description: Invalid Params
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/QueryProofResponse"
    /proof/proofchain:
        get:
            tags:
                - ps
            summary: Query the proofchain under an avatar
            description: Multiple status values can be provided with comma separated strings
            operationId: queryProofChain
            parameters:
                - name: avatar
                  in: query
                  description:
                  required: true
                  #style: form
                - name: page
                  in: query
                  description:
                  required: false
            responses:
                "200":
                    description: successful operation
                "400":
                    description: Invalid status value
    /proof/exists:
        get:
            tags:
                - ps
            summary: Check if a proof exists
            description: >-
                Check if a proof exists
            operationId: proofExists
            parameters:
                - name: platform
                  in: query
                  description:
                  required: true
                  #style: form
                - name: identity
                  in: query
                  description:
                  required: true
                  #style: form
                - name: public_key
                  in: query
                  description:
                  required: true
            responses:
                "200":
                    description: successful
                "400":
                    description: Invalid Params
            security:
    /kv/payload:
        post:
            tags:
                - ks
            summary: Get the message payload for signing
            description: Get signature payload for updating
            operationId: modifyKVPayload
            responses:
                "200":
                    description: successful
                "400":
                    description: Invalid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KVSignaturePayload"
                description:
                required: true
    /kv:
        get:
            tags:
                - ks
            summary: Get current KV of an avatar
            description: Get current KV of an avatar
            operationId: getKv
            parameters:
                - name: avatar
                  in: query
                  description:
                  required: true
            responses:
                "200":
                    description: successful operation
        post:
            tags:
                - ks
            summary: Apply a patch
            description: Apply a patch, post the patch
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KVPostPayload"
                description: the message payload and signature
                required: true
    /kv/by_identity:
        get:
            tags:
                - ks
            summary: Get KV under an identity
            description: Get KV under an identity
            operationId: getKvByIdentity
            parameters:
                - name: platform
                  in: query
                  description:
                  required: true
                  #style: form
                - name: identity
                  in: query
                  description:
                  required: true
            responses:
                "200":
                    description: successful operation
components:
    schemas:
        Action:
            type: string
            description: create or delete
            minLength: 1
            enum:
                - create
                - delete
        Platform:
            type: string
            description: Location where public-accessible proof post is set.
            minLength: 1
        Identity:
            type: string
            description: Identity in target platform to proof. Usually a "username" or "screen name".
            minLength: 1
        PublicKey:
            type: string
            description: Public key of NextID Avatar to connect to. Should be secp256k1 curve (for now), 65-bytes or 33-bytes long (uncompressed / compressed) and stringified into hex form (`/^0x[0-9a-f]{65,130}$/`)
            minLength: 1
        Avatar:
            type: string
            description: Public key of NextID Avatar to connect to. Should be secp256k1 curve (for now), 65-bytes or 33-bytes long (uncompressed / compressed) and stringified into hex form (`/^0x[0-9a-f]{65,130}$/`)
            minLength: 1
        ProofLocation:
            type: string
        ProofExtraObject:
            type: object
            properties:
                wallet_signature:
                    type: string
                signature:
                    type: string
        UUID:
            type: string
        CreatedAt:
            type: string
        Pagination:
            type: object
            properties:
                total:
                    type: integer
                    format: int32
                per:
                    type: integer
                    format: int32
                current:
                    type: integer
                    format: int32
                next:
                    type: integer
                    format: int32
        ProofItem:
            type: object
            properties:
                platform:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/Platform"
                identity:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/Identity"
                created_at:
                    type: string
                    description: Creation time of this proof. (timestamp, unit second)
                last_checked_at:
                    type: string
                    description: When last validation happened. (timestamp, unit second)
                is_valid:
                    type: string
                    description: If not valid, reason will appears here.
        ProofObject:
            type: object
            properties:
                avatar:
                    allOf:
                        - $ref: "#/components/schemas/Avatar"
                last_arweave_id:
                    type: string
                    description: Arweave transaction ID of last proof this avatar signed
                activated_at:
                    type: string
                    description: Last activation time of this avatar. (timestamp, unit second)
                proofs:
                    type: array
                    items:
                        $ref: "#/components/schemas/ProofItem"
        SignatureProofPayload:
            type: object
            properties:
                action:
                    allOf:
                        - $ref: "#/components/schemas/Action"
                public_key:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/PublicKey"
                platform:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/Platform"
                identity:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/Identity"
            xml:
                name: SignatureProofPayload
        SignatureProofPayloadResponse:
            type: object
            required:
                - post_content
                - sign_payload
                - uuid
                - created_at
            properties:
                post_content:
                    description: Post (in different languages) to let user send / save to target platform.
                sign_payload:
                    type: string
                    description: Raw string to be sent to `personal_sign`
                uuid:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/UUID"
                created_at:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/CreatedAt"
            xml:
                name: SignatureProofPayloadResponse
        QueryProofResponse:
            type: object
            required:
                - pagination
                - ids
            properties:
                pagination:
                    type: object
                    allOf:
                        - $ref: "#/components/schemas/Pagination"
                ids:
                    type: array
                    description: All IDs found. Will be empty array if not found
                    items:
                        $ref: "#/components/schemas/ProofObject"
            xml:
                name: QueryProofResponse
        PostProofPayload:
            type: object
            properties:
                action:
                    description: create or delete
                    allOf:
                        - $ref: "#/components/schemas/Action"
                platform:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/Platform"
                identity:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/Identity"
                public_key:
                    type: string
                    description: Public key of NextID Avatar to connect to. Should be secp256k1 curve (for now), 65-bytes or 33-bytes long (uncompressed / compressed) and stringified into hex form (`/^0x[0-9a-f]{65,130}$/`).
                    allOf:
                        - $ref: "#/components/schemas/PublicKey"
                proof_location:
                    type: string
                    description: Location where public-accessible proof post is set.
                    allOf:
                        - $ref: "#/components/schemas/ProofLocation"
                extra:
                    type: object
                    description: Extra info for specific platform needed
                    allOf:
                        - $ref: "#/components/schemas/ProofExtraObject"
                uuid:
                    type: string
                    description: UUID of this chain link. Use the exact value from `POST /v1/proof/payload`.
                    allOf:
                        - $ref: "#/components/schemas/UUID"
                created_at:
                    type: string
                    description: Creation time of this chain link. Use the exact value from `POST /v1/proof/payload`.
                    allOf:
                        - $ref: "#/components/schemas/CreatedAt"
            xml:
                name: PostProofPayload
        KVSignaturePayload:
            type: object
            properties:
                avatar:
                    description: Avatar public key (both comressed / uncompressed and with/without 0x are OK).
                    allOf:
                        - $ref: "#/components/schemas/Avatar"
                platform:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/Platform"
                identity:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/Identity"
                patch:
                    type: object
                    description: Patch to current data
        KVPostPayload:
            type: object
            properties:
                avatar:
                    description: Avatar public key (both comressed / uncompressed and with/without 0x are OK).
                    allOf:
                        - $ref: "#/components/schemas/Avatar"
                platform:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/Platform"
                identity:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/Identity"
                uuid:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/UUID"
                created_at:
                    type: string
                    allOf:
                        - $ref: "#/components/schemas/CreatedAt"
                signature:
                    type: string
                    description: Signature of this request. Base64-ed.
                patch:
                    type: object
                    description: Patch to current data
            xml:
                name: KVPostPayload
