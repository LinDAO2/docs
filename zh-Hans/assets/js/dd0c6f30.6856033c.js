"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[252],{9613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),d=a,m=u["".concat(p,".").concat(d)]||u[d]||f[d]||o;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7611:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(1163),a=(r(9496),r(9613));r(8378);const o={id:"ps-flow",title:"Flow",tags:["proof_service"],sidebar_position:2.5},i="Flow of typical scenario",l={unversionedId:"proof-service/ps-flow",id:"proof-service/ps-flow",title:"Flow",description:"Use this with Glossary",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/proof-service/flow.md",sourceDirName:"proof-service",slug:"/proof-service/ps-flow",permalink:"/zh-Hans/proof-service/ps-flow",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/proof-service/flow.md",tags:[{label:"proof_service",permalink:"/zh-Hans/tags/proof-service"}],version:"current",sidebarPosition:2.5,frontMatter:{id:"ps-flow",title:"Flow",tags:["proof_service"],sidebar_position:2.5},sidebar:"docs",previous:{title:"Glossary",permalink:"/zh-Hans/proof-service/ps-glossary"},next:{title:"Platform supported",permalink:"/zh-Hans/proof-service/ps-platforms-supported"}},p={},s=[{value:"Create a Link",id:"create",level:2},{value:"Create an Ethereum Link",id:"ethereum",level:3},{value:"Delete a link",id:"delete-a-link",level:2},{value:"Query",id:"query",level:2}],c={toc:s},u="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"flow-of-typical-scenario"},"Flow of typical scenario"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Use this with ",(0,a.kt)("a",{parentName:"p",href:"ps-glossary"},"Glossary"))),(0,a.kt)("h2",{id:"create"},"Create a ",(0,a.kt)("a",{parentName:"h2",href:"ps-glossary#glossary-link"},"Link")),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    autonumber\n    actor U as User\n    participant A as Application\n    participant PS as ProofService\n    participant P as Platform\n\n    U ->>+ A : Start a binding with platform, identity\n    A ->>+ PS : POST /v1/proof/payload\n    PS --\x3e>- A : sign_payload, post_content\n    A ->>- U : avatar.eth_avatarlSign(sign_payload)\n    U --\x3e> A : Signature Sp\n    A --\x3e> A : Inject Sp into post_content\n    A --\x3e>+ U : Show to user how to do proof post with post_content\n    U ->>+ P : Publish proof post\n    P --\x3e>- U : Link / ID of Proof post\n    U ->>- A : Link / ID of Proof post\n    A ->>+ PS : POST /v1/proof\n    note right of A : With uuid and created_at from \u2462\n    PS ->>+ P : Request for proof post\n    P --\x3e>- PS : Returns content of Proof post\n    PS --\x3e> PS : Validate Proof post content\n    PS --\x3e>- A : Link created successfully\n    A --\x3e> U : Success"}),(0,a.kt)("details",null,(0,a.kt)("summary",null,"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/rest-api/proofservice-api#proof-payload"},"POST /v1/proof/payload")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/rest-api/proofservice-api#proof-add"},"POST /v1/proof")))),(0,a.kt)("h3",{id:"ethereum"},"Create an Ethereum Link"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This procedure is for ",(0,a.kt)("inlineCode",{parentName:"p"},'platform == "ethereum"'),".")),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    autonumber\n    actor U as User\n    participant W as Wallet\n    participant A as Application\n    participant PS as ProofService\n\n    U ->>+ A : platform: ethereum, identity: 0xWALLET_ADDRESS\n    A ->> PS : POST /v1/proof/payload\n    PS --\x3e> A : sign_payload\n    A ->> U : avatar.eth_avatarlSign(sign_payload)\n    U --\x3e> A : Signature Sp\n    A ->> W : wallet.eth_personalSign(sign_payload)\n    W --\x3e> A : Signature Sw\n    A ->> PS : POST /v1/proof\n    note right of A : extra: Sp and Sw\n    note right of A : With uuid and created_at from \u2462\n    PS --\x3e> PS : Verify Sp and Sw\n    PS --\x3e> A : Link created successfully\n    A --\x3e>- U : Success"}),(0,a.kt)("details",null,(0,a.kt)("summary",null,"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/rest-api/proofservice-api#proof-payload"},"POST /v1/proof/payload")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/rest-api/proofservice-api#proof-add"},"POST /v1/proof")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"identity")," wallet address matches ",(0,a.kt)("inlineCode",{parentName:"li"},"0x[0-9a-f]{40}"),"\u3002"),(0,a.kt)("li",{parentName:"ul"},"No need to publish this sigature somewhere, because:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The ability of generating this sig is equals to the ownership of secret key."),(0,a.kt)("li",{parentName:"ul"},"No one can falsify it, except the secret key owner."))))),(0,a.kt)("h2",{id:"delete-a-link"},"Delete a link"),(0,a.kt)("p",null,"Link deletion is also a link."),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    autonumber\n    actor U as User\n    participant A as Application\n    participant PS as ProofService\n\n    U ->> A : Platform and Identity to perform deletion\n    A ->>+ PS : POST /v1/proof/payload\n    note right of A: action: delete\n    PS --\x3e>- A : sign_payload\n    A ->> U : avatar.eth_avatarlSign(sign_payload)\n    U --\x3e> A : Signature Sp\n    A ->>+ PS : POST /v1/proof\n    note right of A: action: delete\n    note right of A: extra: Sp\n    PS --\x3e> PS : Verify Sp\n    PS --\x3e>- A : Success\n    A --\x3e> U : Success\n"}),(0,a.kt)("details",null,(0,a.kt)("summary",null,"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Application can guide user to delete ",(0,a.kt)("a",{parentName:"li",href:"ps-glossary#glossary-proof-post"},"Proof post")," on specific platform (if any) later."))),(0,a.kt)("h2",{id:"query"},"Query"),(0,a.kt)("p",null,"Check ",(0,a.kt)("a",{parentName:"p",href:"/rest-api/proofservice-api#proof-query"},"GET /v1/proof"),"."))}f.isMDXComponent=!0},8378:(e,t,r)=>{r(9496)}}]);