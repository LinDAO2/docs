"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[528],{9613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(9496);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=l(r),h=i,f=p["".concat(s,".").concat(h)]||p[h]||d[h]||a;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=h;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[p]="string"==typeof e?e:i,o[1]=u;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},3842:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var n=r(1163),i=(r(9496),r(9613));r(8378);const a={id:"as-workflow",title:"Workflow",sidebar_position:2},o=void 0,u={unversionedId:"auth-service/as-workflow",id:"auth-service/as-workflow",title:"Workflow",description:"Sequence",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/auth-service/workflow.md",sourceDirName:"auth-service",slug:"/auth-service/as-workflow",permalink:"/zh-Hans/auth-service/as-workflow",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/auth-service/workflow.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"as-workflow",title:"Workflow",sidebar_position:2},sidebar:"docs",previous:{title:"Introduction",permalink:"/zh-Hans/auth-service/as-intro"},next:{title:"Go",permalink:"/zh-Hans/developer-guide/go"}},s={},l=[{value:"Sequence",id:"sequence",level:2},{value:"Auth with 3rd party",id:"auth-with-3rd-party",level:3},{value:"How AuthService authenticate you?",id:"how-authservice-authenticate-you",level:3},{value:"Authenticate with supported platforms",id:"authenticate-with-supported-platforms",level:4},{value:"Subkey generation",id:"subkey-generation",level:4},{value:"dApp callback",id:"dapp-callback",level:3},{value:"Parameters",id:"parameters",level:4}],c={toc:l},p="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"sequence"},"Sequence"),(0,i.kt)("h3",{id:"auth-with-3rd-party"},"Auth with 3rd party"),(0,i.kt)("mermaid",{value:"sequenceDiagram\n    User->>dApp: 1. Click login with Next.ID\n    dApp->>Self-hosted AuthService: 2. Generate an AuthService URL to authenticate\n    Self-hosted AuthService->>+User: 3. Redirect to Authenticate prompt\n    User->>-Self-hosted AuthService: 4. Authenticate by supported platforms (incl. Twitter OAuth, ETH wallet sign)\n    Self-hosted AuthService->>User: 5. Redirect to Authorize prompt w/ scopes required\n    User->>Self-hosted AuthService: 6. Authorize and Consent\n    Self-hosted AuthService->>+User: 7. Redirect User to dApp page with signature signed by Avatar\n    User->>-dApp: 8. Access dApp callback URL with signature"}),(0,i.kt)("h3",{id:"how-authservice-authenticate-you"},"How AuthService authenticate you?"),(0,i.kt)("p",null,"When performing an authorization process, AuthService will send a request to ",(0,i.kt)("a",{parentName:"p",href:"/zh-Hans/kv-service/kv-intro"},"ProofService")," to find if the authenticated identity on a 3rd party platform (e.g. Twitter ID) is bound to a Next.ID Avatar pre-configured on this AuthService."),(0,i.kt)("p",null,"If found, AuthService will generate a signature signed by a subkey derived from the Avatar and then redirect user to the dApp callback URL with the signature."),(0,i.kt)("h4",{id:"authenticate-with-supported-platforms"},"Authenticate with ",(0,i.kt)("a",{parentName:"h4",href:"as-intro#supported-platforms"},"supported platforms")),(0,i.kt)("p",null,"Supported platforms are pre-configured on self-hosted AuthService. For example, if user wants to authenticate with Twitter later, it needs to configure Twitter OAuth client ID and client secret."),(0,i.kt)("h4",{id:"subkey-generation"},"Subkey generation"),(0,i.kt)("p",null,"AuthService stores subkey in configuration instead of Avatar to protect the private key. The subkey needs to be signed by Avatar with format in eth_sign method: ",(0,i.kt)("inlineCode",{parentName:"p"},"Subkey certification signature: ${subkey_public_key_hex}"),"."),(0,i.kt)("p",null,"Check ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nextdotid/auth_server/blob/main/build/generate_subkey.py"},"helper script")," for more information."),(0,i.kt)("h3",{id:"dapp-callback"},"dApp callback"),(0,i.kt)("p",null,"After user redirected to the dApp callback URL, dApp needs to verify the signature. If the signature is valid, dApp can trust the authenticated identity."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"avatar")," (string, required): Avatar public key hex string."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"expired_at")," (string, required): UNIX timestamp."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"state")," (string, required): State string passed from dApp."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"subkey")," (string, required): Subkey public key hex string."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"subkey_cert_sig")," (string, required): Subkey certification signature signed by Avatar, encoded in Base58."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"sig")," (string, required): Signature of ",(0,i.kt)("inlineCode",{parentName:"li"},"avatar=${avatar}\\nredirect_uri={redirect_uri}\\nexpired_at=${expired_at}\\nstate=${state}")," signed by Subkey, encoded in Base58.")))}d.isMDXComponent=!0},8378:(e,t,r)=>{r(9496)}}]);