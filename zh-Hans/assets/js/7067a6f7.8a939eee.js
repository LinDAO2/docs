"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[3684],{9613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=p(r),u=a,k=f["".concat(s,".").concat(u)]||f[u]||d[u]||o;return r?n.createElement(k,i(i({ref:t},c),{},{components:r})):n.createElement(k,i({ref:t},c))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[f]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2122:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(1163),a=(r(9496),r(9613));r(8378);const o={id:"ps-glossary",title:"Glossary",sidebar_position:2},i="Glossary",l={unversionedId:"proof-service/ps-glossary",id:"proof-service/ps-glossary",title:"Glossary",description:"Avatar",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/proof-service/glossary.md",sourceDirName:"proof-service",slug:"/proof-service/ps-glossary",permalink:"/zh-Hans/proof-service/ps-glossary",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/proof-service/glossary.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"ps-glossary",title:"Glossary",sidebar_position:2},sidebar:"docs",previous:{title:"Introduction",permalink:"/zh-Hans/proof-service/ps-intro"},next:{title:"Flow",permalink:"/zh-Hans/proof-service/ps-flow"}},s={},p=[{value:"Avatar",id:"glossary-avatar",level:2},{value:"Identity",id:"glossary-identity",level:2},{value:"Platform",id:"glossary-platform",level:2},{value:"Proof post",id:"glossary-proof-post",level:2},{value:"Binding (Link)",id:"glossary-link",level:2},{value:"Proof Chain",id:"glossary-proof-chain",level:2},{value:"Downgrade",id:"glossary-downgrade",level:2}],c={toc:p},f="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(f,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"glossary"},"Glossary"),(0,a.kt)("h2",{id:"glossary-avatar"},"Avatar"),(0,a.kt)("p",null,"Persona is the core of user ID network in ProofService."),(0,a.kt)("p",null,"All other ",(0,a.kt)("a",{parentName:"p",href:"#glossary-identity"},"Identities")," (Web2.0 account, blockchain wallet etc.) are ",(0,a.kt)("strong",{parentName:"p"},"only"),"\nbinded with Persona."),(0,a.kt)("mermaid",{value:"flowchart LR\n\nTwitter <--\x3e|Proof Tweet|Persona\nPersona <--\x3e|Sign|EthereumWallet\nGithub <--\x3e|Public Gist|Persona\nPersona <--\x3e|Public Message|Discord"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For now, Persona is elliptic curve keypair using ",(0,a.kt)("inlineCode",{parentName:"p"},"secp256k1")," curve.")),(0,a.kt)("h2",{id:"glossary-identity"},"Identity"),(0,a.kt)("p",null,"Accounts / Identities on other ",(0,a.kt)("a",{parentName:"p",href:"#glossary-platform"},"Platform")," which is\nbinded with ",(0,a.kt)("a",{parentName:"p",href:"#glossary-avatar"},"Avatar"),"."),(0,a.kt)("p",null,"For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"@my_twitter")," on ",(0,a.kt)("inlineCode",{parentName:"p"},"twitter")," platform, ",(0,a.kt)("inlineCode",{parentName:"p"},"my_github")," on ",(0,a.kt)("inlineCode",{parentName:"p"},"github")," platform."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"See ",(0,a.kt)("a",{parentName:"p",href:"ps-platforms-supported"},"Supported platforms")," for more info.")),(0,a.kt)("h2",{id:"glossary-platform"},"Platform"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"#glossary-identity"},"Identity")," provider."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"e.g. Twitter, GitHub, Facebook, Ethereum, etc.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"See ",(0,a.kt)("a",{parentName:"p",href:"ps-platforms-supported"},"Supported platforms")," for more info.")),(0,a.kt)("h2",{id:"glossary-proof-post"},"Proof post"),(0,a.kt)("p",null,'To prove "I have this ',(0,a.kt)("a",{parentName:"p",href:"#glossary-identity"},"identity"),'", user needs to\ntakes an action: use this ',(0,a.kt)("a",{parentName:"p",href:"#glossary-identity"},"identity")," to post an\naccessible, specified content, which is called ",(0,a.kt)("em",{parentName:"p"},"Proof post"),"."),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},'platform: "twitter"'),", proof post should be a public visible tweet."),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},'platform: "github"'),", a public visible ",(0,a.kt)("inlineCode",{parentName:"p"},"Gist"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Proof post shapes different on different ",(0,a.kt)("a",{parentName:"p",href:"#glossary-platform"},"platform"),"."),(0,a.kt)("p",{parentName:"blockquote"},"See ",(0,a.kt)("a",{parentName:"p",href:"ps-platforms-supported"},"Supported platforms")," for more info.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"If ",(0,a.kt)("a",{parentName:"mdxAdmonitionTitle",href:"#glossary-identity"},"Identity")," is cryptography ID"),(0,a.kt)("p",{parentName:"admonition"},"Cryptography ID (e.g. blockchain wallet) don't need to put a proof\npost somewhere, since sigature generating itself can already prove\nthat user owns its private key.")),(0,a.kt)("admonition",{title:"If Proof post is deleted by user",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"See ",(0,a.kt)("a",{parentName:"p",href:"#glossary-downgrade"},"Downgrade"),"\u3002")),(0,a.kt)("h2",{id:"glossary-link"},"Binding (Link)"),(0,a.kt)("p",null,"After ProofService validates ",(0,a.kt)("a",{parentName:"p",href:"#glossary-proof-post"},"Proof post"),' on\nserver side, a binding record of "',(0,a.kt)("a",{parentName:"p",href:"#glossary-avatar"},"Avatar")," <->\n",(0,a.kt)("a",{parentName:"p",href:"#glossary-identity"},"Identity"),'" will be saved into ',(0,a.kt)("a",{parentName:"p",href:"#glossary-proof-chain"},"Proof\nChain"),"."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Struct of Link"),(0,a.kt)("admonition",{title:"Note",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Code below is only a reference of Link, not specific\nimplementation in ProofService or API structure.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="link.d.ts"',title:'"link.d.ts"'},'// assert(signature.match(/0x[a-f0-9]{144}/))\n// Sample:\n// 0x3046022100881328457aa312135c37e1ddf8a129717274ce3f389c176936f5cb44edf04fc4022100be183139154d108ce2e5d6ba16678b0dbeb3b7d70caac2b00b2dad8f81e87790\ntype Signature = string;\n\n// All available chain modification actions\nenum Action {\n    Create = "create",\n    Delete = "delete",\n}\n\n// All supported platforms,\nenum Platform {\n    Twitter = "twitter",\n    Keybase = "keybase",\n}\n\n// Each link in the proof chain\ninterface Link {\n    // If this is genesis link, leave it null; else, it equals\n    // previous link\'s signature. Worked as a pointer.\n    prev: Signature | null;\n    action: Action;\n    platform: Platform;\n    identity: string;\n    // if method === Method.Add, then it must be a string; else, left null\n    proof_location: string | null;\n    // UNIX timestamp (unit: second)\n    created_at: number;\n    // An UUID of this link, works as a global identifier.\n    uuid: string;\n    // Signature of this link made by avatar.\n    signature: Signature;\n}\n'))),(0,a.kt)("h2",{id:"glossary-proof-chain"},"Proof Chain"),(0,a.kt)("p",null,"Each ",(0,a.kt)("a",{parentName:"p",href:"#glossary-link"},"Link")," under the same ",(0,a.kt)("a",{parentName:"p",href:"#glossary-avatar"},"Avatar")," is chained into a link:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Each ",(0,a.kt)("a",{parentName:"li",href:"#glossary-link"},"Link")," has a signature of\n",(0,a.kt)("a",{parentName:"li",href:"#glossary-avatar"},"Avatar"),"."),(0,a.kt)("li",{parentName:"ul"},"Every ",(0,a.kt)("a",{parentName:"li",href:"#glossary-link"},"Link")," (except the first one under this\n",(0,a.kt)("a",{parentName:"li",href:"#glossary-avatar"},"Avatar"),") has its previous\n",(0,a.kt)("a",{parentName:"li",href:"#glossary-link"},"Link"),"'s signature.")),(0,a.kt)("p",null,"So to ensure that ProofService server cannot falsify any of the record\nin the chain without Persona-provided signature."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Proof Chain mechanism is not picky of storage media. But we will put\nit in Arweave / IPFS in the future, anyway.")),(0,a.kt)("admonition",{title:"TBD",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"There will be an API to export the whole Proof Chain of a Persona.")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Struct of Proof Chain"),(0,a.kt)("admonition",{title:"Note",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Code below is only a reference of Proof Chain, not specific\nimplementation in ProofService or API structure.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="chain.d.ts"',title:'"chain.d.ts"'},'const VERSION = "1";\n\n// assert(public_key.match(/^0x[a-f0-9]{130}$/))\n// Sample:\n// 0x0428b73a2b67a88a47edb15bed5c73a199e24287bb12997c54239e9e6815e24a3032a502d58afe3f36a54f2f7606022907f358d0dd58939cffa0a845c5043ce038\ntype PublicKey = string;\n\ninterface Chain {\n    version: VERSION;\n    avatar: {\n        public_key: PublicKey,\n        curve: "secp256k1",\n    };\n    // See definition of `Link` above.\n    links: Link[];\n}\n'))),(0,a.kt)("h2",{id:"glossary-downgrade"},"Downgrade"),(0,a.kt)("admonition",{title:"WIP",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"\ud83d\udc77\u200d\u2640\ufe0f\ud83d\udc77 Work in progress, will be ready SOON\u2122\ufe0f.")),(0,a.kt)("p",null,"ProofService server will periodically check the validity of ",(0,a.kt)("a",{parentName:"p",href:"#glossary-proof-post"},"Proof post"),"."),(0,a.kt)("p",null,"If ",(0,a.kt)("a",{parentName:"p",href:"#glossary-proof-post"},"Proof post")," becomes invalid, this binding\nrecord will be marked as ",(0,a.kt)("inlineCode",{parentName:"p"},'"is_valid": false')," (with reason) in\n",(0,a.kt)("a",{parentName:"p",href:"/rest-api/proofservice-api#proof-query"},"Query API"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"e.g. User deletes ",(0,a.kt)("a",{parentName:"p",href:"#glossary-proof-post"},"Proof tweet")," after creating\na ",(0,a.kt)("a",{parentName:"p",href:"#glossary-link"},"Link"),", but doesn't ",(0,a.kt)("a",{parentName:"p",href:"/rest-api/proofservice-api#proof-add"},"inform"),"\nProofService to delete this link (aka unbind).")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"ProofService still won't (and can't) do anything to ",(0,a.kt)("a",{parentName:"p",href:"#glossary-proof-chain"},"Proof\nChain")," even downgraded."),(0,a.kt)("p",{parentName:"blockquote"},"All ProofService can do is to return ",(0,a.kt)("inlineCode",{parentName:"p"},'"is_valid": false')," in ",(0,a.kt)("a",{parentName:"p",href:"/rest-api/proofservice-api#proof-query"},"Query\nAPI"),".")),(0,a.kt)("p",null,"How to handle this downgraded relationship is entirely up to applications which use ProofService."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"e.g. show a \u26a0\ufe0f to user, low priority when presenting, or just omit it.")))}d.isMDXComponent=!0},8378:(e,t,r)=>{r(9496)}}]);