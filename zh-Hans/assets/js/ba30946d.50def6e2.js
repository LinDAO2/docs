"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[528],{9749:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var r=i(6600),a=(i(9496),i(9613)),n=i(9295);const o={id:"as-workflow",title:"Workflow",sidebar_position:2},s=void 0,u={unversionedId:"auth-service/as-workflow",id:"auth-service/as-workflow",title:"Workflow",description:"Sequence",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/auth-service/workflow.md",sourceDirName:"auth-service",slug:"/auth-service/as-workflow",permalink:"/zh-Hans/auth-service/as-workflow",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/auth-service/workflow.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"as-workflow",title:"Workflow",sidebar_position:2},sidebar:"docs",previous:{title:"Introduction",permalink:"/zh-Hans/auth-service/as-intro"},next:{title:"Go",permalink:"/zh-Hans/developer-guide/go"}},d={},l=[{value:"Sequence",id:"sequence",level:2},{value:"Auth with 3rd party",id:"auth-with-3rd-party",level:3},{value:"How AuthService authenticate you?",id:"how-authservice-authenticate-you",level:3},{value:"Authenticate with supported platforms",id:"authenticate-with-supported-platforms",level:4},{value:"Subkey generation",id:"subkey-generation",level:4},{value:"dApp callback",id:"dapp-callback",level:3},{value:"Parameters",id:"parameters",level:4}],p={toc:l};function c(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"sequence"},"Sequence"),(0,a.kt)("h3",{id:"auth-with-3rd-party"},"Auth with 3rd party"),(0,a.kt)(n.G,{chart:"sequenceDiagram\n    User->>dApp: 1. Click login with Next.ID\n    dApp->>Self-hosted AuthService: 2. Generate an AuthService URL to authenticate\n    Self-hosted AuthService->>+User: 3. Redirect to Authenticate prompt\n    User->>-Self-hosted AuthService: 4. Authenticate by supported platforms (incl. Twitter OAuth, ETH wallet sign)\n    Self-hosted AuthService->>User: 5. Redirect to Authorize prompt w/ scopes required\n    User->>Self-hosted AuthService: 6. Authorize and Consent\n    Self-hosted AuthService->>+User: 7. Redirect User to dApp page with signature signed by Avatar\n    User->>-dApp: 8. Access dApp callback URL with signature",mdxType:"Mermaid"}),(0,a.kt)("h3",{id:"how-authservice-authenticate-you"},"How AuthService authenticate you?"),(0,a.kt)("p",null,"When performing an authorization process, AuthService will send a request to ",(0,a.kt)("a",{parentName:"p",href:"/zh-Hans/kv-service/kv-intro"},"ProofService")," to find if the authenticated identity on a 3rd party platform (e.g. Twitter ID) is bound to a Next.ID Avatar pre-configured on this AuthService."),(0,a.kt)("p",null,"If found, AuthService will generate a signature signed by a subkey derived from the Avatar and then redirect user to the dApp callback URL with the signature."),(0,a.kt)("h4",{id:"authenticate-with-supported-platforms"},"Authenticate with ",(0,a.kt)("a",{parentName:"h4",href:"as-intro#supported-platforms"},"supported platforms")),(0,a.kt)("p",null,"Supported platforms are pre-configured on self-hosted AuthService. For example, if user wants to authenticate with Twitter later, it needs to configure Twitter OAuth client ID and client secret."),(0,a.kt)("h4",{id:"subkey-generation"},"Subkey generation"),(0,a.kt)("p",null,"AuthService stores subkey in configuration instead of Avatar to protect the private key. The subkey needs to be signed by Avatar with format in eth_sign method: ",(0,a.kt)("inlineCode",{parentName:"p"},"Subkey certification signature: ${subkey_public_key_hex}"),"."),(0,a.kt)("p",null,"Check ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nextdotid/auth_server/blob/main/build/generate_subkey.py"},"helper script")," for more information."),(0,a.kt)("h3",{id:"dapp-callback"},"dApp callback"),(0,a.kt)("p",null,"After user redirected to the dApp callback URL, dApp needs to verify the signature. If the signature is valid, dApp can trust the authenticated identity."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"avatar")," (string, required): Avatar public key hex string."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"expired_at")," (string, required): UNIX timestamp."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"state")," (string, required): State string passed from dApp."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"subkey")," (string, required): Subkey public key hex string."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"subkey_cert_sig")," (string, required): Subkey certification signature signed by Avatar, encoded in Base58."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"sig")," (string, required): Signature of ",(0,a.kt)("inlineCode",{parentName:"li"},"avatar=${avatar}\\nredirect_uri={redirect_uri}\\nexpired_at=${expired_at}\\nstate=${state}")," singed by Subkey, encoded in Base58.")))}c.isMDXComponent=!0}}]);