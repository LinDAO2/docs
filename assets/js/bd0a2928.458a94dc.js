"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[8213],{9613:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6123:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(1163),a=(r(9496),r(9613));r(8378);const o={id:"rs-system",title:"System Architecture",sidebar_position:2},i=void 0,s={unversionedId:"relation-service/rs-system",id:"relation-service/rs-system",title:"System Architecture",description:"Flow",source:"@site/docs/relation-service/system.md",sourceDirName:"relation-service",slug:"/relation-service/rs-system",permalink:"/relation-service/rs-system",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/relation-service/system.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"rs-system",title:"System Architecture",sidebar_position:2},sidebar:"docs",previous:{title:"Introduction",permalink:"/relation-service/rs-intro"},next:{title:"GraphQL",permalink:"/relation-service/rs-graphql"}},l={},c=[{value:"Flow",id:"flow",level:2},{value:"Processing a query",id:"processing-a-query",level:3},{value:"Fetch data from Upstreams",id:"fetch-data-from-upstreams",level:3},{value:"See also",id:"see-also",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"flow"},"Flow"),(0,a.kt)("h3",{id:"processing-a-query"},"Processing a query"),(0,a.kt)("mermaid",{value:"flowchart TD\n    A[Start a query] --\x3e B{Found target record in DB?}\n    B --\x3e|Yes| C{Is record outdated?}\n    B --\x3e|No| D[Fetch data from Upstreams]\n    C --\x3e|Yes| D\n    C --\x3e|No| E[Yield result in GraphQL way]\n    D --\x3e E"}),(0,a.kt)("h3",{id:"fetch-data-from-upstreams"},"Fetch data from ",(0,a.kt)("a",{parentName:"h3",href:"rs-intro#upstreams"},"Upstream"),"s"),(0,a.kt)("p",null,"When performing a data fetching process, RelationService will"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Iter all available upstreams which can handle this query"),(0,a.kt)("li",{parentName:"ol"},"Request and collect results from each upstream available"),(0,a.kt)("li",{parentName:"ol"},"Newly fetched data will be fed into this circulation again, until no new data is yield.")),(0,a.kt)("p",null,"A psuedo code snippet describing this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'up_next = [{platform: :platform_to_query, identity: "identity_to_query"}]\nfetched = []\n\nuntil up_next.empty? do\n  processing = up_next.pop()\n  results = fetch_one(processing)\n  fetched.push(processing)\n  results.each do |result|\n    next if up_next.contains?(result) || fetched.contains?(result)\n    up_next.push(result)\n  end\nend\n\n# Query all available upstream for connections of given identity.\ndef fetch_one(identity)\n  all_upstreams.map do |upstream|\n    upstream.can_handle?(identity) ? upstream.perform_query(identity) : []\n  end.flatten()\nend\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Actual code can be found at\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nextdotid/relation_server/blob/develop/src/upstream/mod.rs"},"src/upstream/mod.rs"),"\n-> ",(0,a.kt)("inlineCode",{parentName:"p"},"pub async fn fetch_all()")," definition")),(0,a.kt)("p",null,'So you may found a "code search" kind of slow in the first time, but\nwhen it is fetched and cached in RelationService DB, second query will\nbecome pretty fast.'),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"rs-graphql"},"GraphQL")," usage")))}d.isMDXComponent=!0},8378:(e,t,r)=>{r(9496)}}]);