"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[7937],{3645:(e,a,t)=>{t.d(a,{Z:()=>o});var n=t(9496),r=t(5924);const i="tabItem_x3QN";function o(e){let{children:a,hidden:t,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:t},a)}},537:(e,a,t)=>{t.d(a,{Z:()=>m});var n=t(6600),r=t(9496),i=t(5924),o=t(492),l=t(6878),s=t(7496),d=t(4542);const p="tabList_HjGn",u="tabItem_R6JG";function c(e){var a;const{lazy:t,block:o,defaultValue:c,values:m,groupId:k,className:g}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=m??b.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),h=(0,l.l)(v,((e,a)=>e.value===a.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===c?c:c??(null==(a=b.find((e=>e.props.default)))?void 0:a.props.value)??b[0].props.value;if(null!==f&&!v.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:y}=(0,s.U)(),[x,C]=(0,r.useState)(f),w=[],{blockElementScrollPositionUntilNextRender:S}=(0,d.o5)();if(null!=k){const e=N[k];null!=e&&e!==x&&v.some((a=>a.value===e))&&C(e)}const T=e=>{const a=e.currentTarget,t=w.indexOf(a),n=v[t].value;n!==x&&(S(a),C(n),null!=k&&y(k,String(n)))},A=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{const a=w.indexOf(e.currentTarget)+1;t=w[a]??w[0];break}case"ArrowLeft":{const a=w.indexOf(e.currentTarget)-1;t=w[a]??w[w.length-1];break}}null==(a=t)||a.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},g)},v.map((e=>{let{value:a,label:t,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:x===a?0:-1,"aria-selected":x===a,key:a,ref:e=>w.push(e),onKeyDown:A,onFocus:T,onClick:T},o,{className:(0,i.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":x===a})}),t??a)}))),t?(0,r.cloneElement)(b.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==x})))))}function m(e){const a=(0,o.Z)();return r.createElement(c,(0,n.Z)({key:String(a)},e))}},3085:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=t(6600),r=(t(9496),t(9613));t(9295),t(537),t(3645);const i={title:"FAQ"},o=void 0,l={unversionedId:"faq",id:"faq",title:"FAQ",description:"How do I generate an Avatar?",source:"@site/docs/faq.mdx",sourceDirName:".",slug:"/faq",permalink:"/faq",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/faq.mdx",tags:[],version:"current",frontMatter:{title:"FAQ"},sidebar:"docs",previous:{title:"Glossary",permalink:"/glossary"},next:{title:"ProofService API",permalink:"/rest-api/proofservice-api"}},s={},d=[{value:"How do I generate an Avatar?",id:"how-do-i-generate-an-avatar",level:2},{value:"I got <code>&quot;bad signature&quot;</code> error in <code>POST /v1/proof</code>",id:"bad-signature",level:2},{value:"I got <code>public key mismatch</code> error in <code>POST /v1/kv</code>",id:"bad-signature",level:2},{value:"Does KVService rely on an existed Avatar / binding on ProofService?",id:"does-kvservice-rely-on-an-existed-avatar--binding-on-proofservice",level:2}],p={toc:d};function u(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"how-do-i-generate-an-avatar"},"How do I generate an Avatar?"),(0,r.kt)("p",null,"As in ",(0,r.kt)("a",{parentName:"p",href:"./glossary"},"glossary"),", technically, Avatar\nis the same as Ethereum wallet: they're both ",(0,r.kt)("inlineCode",{parentName:"p"},"secp256k1")," elliptic\ncurve asymmetric keypair."),(0,r.kt)("p",null,"So, generating and managing Avatar should be the same as generating /\nmanaging wallets. Search for an ",(0,r.kt)("inlineCode",{parentName:"p"},"secp256k1")," SDK in your project's\nprogramming language to generate one."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Basically,"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"secret key should be 32-bytes long"),(0,r.kt)("li",{parentName:"ul"},"public key has 2 shapes:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Uncompressed(65-bytes, started with ",(0,r.kt)("inlineCode",{parentName:"li"},"0x04"),"), or"),(0,r.kt)("li",{parentName:"ul"},"compressed(33-bytes, started with ",(0,r.kt)("inlineCode",{parentName:"li"},"0x02")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"0x03"),", in most case ",(0,r.kt)("inlineCode",{parentName:"li"},"0x02"),")"))))),(0,r.kt)("h2",{id:"bad-signature"},"I got ",(0,r.kt)("inlineCode",{parentName:"h2"},'"bad signature"')," error in ",(0,r.kt)("a",{parentName:"h2",href:"../rest-api/proofservice-api#proof-add"},(0,r.kt)("inlineCode",{parentName:"a"},"POST /v1/proof"))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Check if ",(0,r.kt)("inlineCode",{parentName:"li"},"created_at")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"uuid")," is the same as ",(0,r.kt)("a",{parentName:"li",href:"../rest-api/proofservice-api#proof-payload"},(0,r.kt)("inlineCode",{parentName:"a"},"POST /v1/proof/payload"))," result."),(0,r.kt)("li",{parentName:"ol"},"Check if you're using ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ChainSafe/web3.js/blob/1.x/docs/web3-eth-personal.rst#sign"},"Ethereum Personal Sign"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If your DApp is using wallet SDK (e.g. MetaMask), make sure\nyou're using correct signature RPC method.")))),(0,r.kt)("admonition",{title:"How do I implement personal sign by myself?",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"In pseudo-code, ",(0,r.kt)("inlineCode",{parentName:"li"},"personal_sign")," is:")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'sign(keccak256("\\x19Ethereum Signed Message:\\n" + dataToSign.length + dataToSign)))\n')),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Make sure ",(0,r.kt)("inlineCode",{parentName:"li"},"dataToSign.length")," is length of bytes (",(0,r.kt)("inlineCode",{parentName:"li"},"Buffer"),"\nlength in some language), not UTF-8 ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Code_point"},"code\npoint")," length.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'assert.Equal(4, len([]byte("\ud83d\udc0e"))) // Not 1\n'))),(0,r.kt)("li",{parentName:"ul"},"Signature should be 65-bytes long.")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-elixir"},"<<r::binary-size(32), s::binary-size(32), v::binary-size(1)>> = signature_binary\n# v should be 0x00 or 0x01 or 0x1B or 0x1C\n# 0x00 is equivalent to 0x1B\n# 0x01 is equivalent to 0x1C\n")),(0,r.kt)("p",{parentName:"admonition"},"Here's a test case."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Psuedo-code\n// Given a signature payload\npayload := "Test123123!"\n// And a secret key\nsecret_key := "0x9deba3488458c0314e5fef8920d3b117dd76415569cf270db8fd864896c02732"\n// The personal sign result should be\nassert.Equal(\n  "0x52f210dadad13c4c8d0656e7380300a367a056631cf26950baa7de4f580187795c76b5fc94de5bd0b8af4d5df432687d900402cba86a12570af56be35ba8d56401",\n  personal_sign(secret_key, payload).ToHexString()\n)\n'))),(0,r.kt)("h2",{id:"bad-signature"},"I got ",(0,r.kt)("inlineCode",{parentName:"h2"},"public key mismatch")," error in ",(0,r.kt)("inlineCode",{parentName:"h2"},"POST /v1/kv")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#bad-signature"},"ProofService FAQ"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Double check ",(0,r.kt)("inlineCode",{parentName:"p"},"dataToSign.length")," part.")),(0,r.kt)("h2",{id:"does-kvservice-rely-on-an-existed-avatar--binding-on-proofservice"},"Does KVService rely on an existed Avatar / binding on ProofService?"),(0,r.kt)("p",null,"Not really! You can use this as a storage for every secp256k1 keypair\n(",(0,r.kt)("inlineCode",{parentName:"p"},'platform == nextid && identity == "0xPUBLIC_KEY"'),") without even\nusing it on ProofService."),(0,r.kt)("p",null,"But, if you want to save data related to a specific account, we still\nencourage you to put it under precise ",(0,r.kt)("inlineCode",{parentName:"p"},"platform")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"identity"),"."),(0,r.kt)("p",null,"A typical case is, your DApp allows user to set different NFT avatar\non Twitter and Github. In this case, ",(0,r.kt)("inlineCode",{parentName:"p"},"platform")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"identity")," should\nbe specified (instead of being put under an ambiguous Avatar pubkey)."))}u.isMDXComponent=!0}}]);