"use strict";(self.webpackChunknext_id_doc=self.webpackChunknext_id_doc||[]).push([[3259],{5493:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>v,contentTitle:()=>k,default:()=>x,frontMatter:()=>b,metadata:()=>y,toc:()=>N});var n=t(6600),r=t(9496),s=t(9613),i=(t(9295),t(5924)),o=t(6559),l=t(2506),c=t(4710),p=t(3077);const d="tabList_uwhK",u="tabItem_G9vX";function m(e){var a;const{lazy:t,block:s,defaultValue:o,values:m,groupId:g,className:f}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??h.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),k=(0,l.l)(b,((e,a)=>e.value===a.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===o?o:o??(null==(a=h.find((e=>e.props.default)))?void 0:a.props.value)??h[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,c.U)(),[S,x]=(0,r.useState)(y),_=[],{blockElementScrollPositionUntilNextRender:w}=(0,p.o5)();if(null!=g){const e=v[g];null!=e&&e!==S&&b.some((a=>a.value===e))&&x(e)}const T=e=>{const a=e.currentTarget,t=_.indexOf(a),n=b[t].value;n!==S&&(w(a),x(n),null!=g&&N(g,String(n)))},C=e=>{var a;let t=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const a=_.indexOf(e.currentTarget)+1;t=_[a]??_[0];break}case"ArrowLeft":{const a=_.indexOf(e.currentTarget)-1;t=_[a]??_[_.length-1];break}}null==(a=t)||a.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":s},f)},b.map((e=>{let{value:a,label:t,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:S===a?0:-1,"aria-selected":S===a,key:a,ref:e=>_.push(e),onKeyDown:C,onClick:T},s,{className:(0,i.Z)("tabs__item",u,null==s?void 0:s.className,{"tabs__item--active":S===a})}),t??a)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===S))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==S})))))}function g(e){const a=(0,o.Z)();return r.createElement(m,(0,n.Z)({key:String(a)},e))}const f="tabItem_M9Pg";function h(e){let{children:a,hidden:t,className:n}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(f,n),hidden:t},a)}const b={id:"ps-faq",title:"FAQ",sidebar_position:5},k=void 0,y={unversionedId:"proof-service/ps-faq",id:"proof-service/ps-faq",title:"FAQ",description:"How do I generate a Avatar?",source:"@site/docs/proof-service/faq.mdx",sourceDirName:"proof-service",slug:"/proof-service/ps-faq",permalink:"/proof-service/ps-faq",draft:!1,editUrl:"https://github.com/nextdotid/docs/edit/main/docs/proof-service/faq.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"ps-faq",title:"FAQ",sidebar_position:5},sidebar:"docs",previous:{title:"Platforms supported",permalink:"/proof-service/ps-platforms-supported"},next:{title:"Introduction",permalink:"/kv-service/kv-intro"}},v={},N=[{value:"How do I generate a Avatar?",id:"how-do-i-generate-a-avatar",level:2},{value:"I got <code>&quot;bad signature&quot;</code> error in <code>POST /v1/proof</code>",id:"bad-signature",level:2},{value:"Sample code snippets for avatar-generating and signing",id:"sample",level:2},{value:"I want to contribute to ProofService, which platforms do you accept?",id:"i-want-to-contribute-to-proofservice-which-platforms-do-you-accept",level:2}],S={toc:N};function x(e){let{components:a,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},S,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"how-do-i-generate-a-avatar"},"How do I generate a ",(0,s.kt)("a",{parentName:"h2",href:"ps-glossary#glossary-avatar"},"Avatar"),"?"),(0,s.kt)("p",null,"As in ",(0,s.kt)("a",{parentName:"p",href:"ps-glossary#glossary-avatar"},"glossary"),", technically, avatars/\nis the same as Ethereum wallet: they're both ",(0,s.kt)("inlineCode",{parentName:"p"},"secp256k1")," elliptic\ncurve asymmetric keypair."),(0,s.kt)("p",null,"So, generating and managing Persona should be the same as generating /\nmanaging wallets. Search for an ",(0,s.kt)("inlineCode",{parentName:"p"},"secp256k1")," SDK in your project's\nprogramming language to generate one."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Basiclly,"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"secret key should be 32-bytes long"),(0,s.kt)("li",{parentName:"ul"},"public key has 2 shapes:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Uncompressed(65-bytes, started with ",(0,s.kt)("inlineCode",{parentName:"li"},"0x04"),"), or"),(0,s.kt)("li",{parentName:"ul"},"compressed(33-bytes, started with ",(0,s.kt)("inlineCode",{parentName:"li"},"0x02")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"0x03"),", in most case ",(0,s.kt)("inlineCode",{parentName:"li"},"0x02"),")"))))),(0,s.kt)("h2",{id:"bad-signature"},"I got ",(0,s.kt)("inlineCode",{parentName:"h2"},'"bad signature"')," error in ",(0,s.kt)("a",{parentName:"h2",href:"/rest-api/proofservice-api#proof-add"},(0,s.kt)("inlineCode",{parentName:"a"},"POST /v1/proof"))),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Check if ",(0,s.kt)("inlineCode",{parentName:"li"},"created_at")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"uuid")," is the same as ",(0,s.kt)("a",{parentName:"li",href:"/rest-api/proofservice-api#proof-payload"},(0,s.kt)("inlineCode",{parentName:"a"},"POST /v1/proof/payload"))," result."),(0,s.kt)("li",{parentName:"ol"},"Check if you're using ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/ChainSafe/web3.js/blob/1.x/docs/web3-eth-personal.rst#sign"},"Ethereum Personal Sign"),".",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"If your DApp is using wallet SDK (e.g. MetaMask), make sure\nyou're using correct signature RPC method.")))),(0,s.kt)("admonition",{title:"How do I implement personal sign by myself?",type:"tip"},(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"In pseudo-code, ",(0,s.kt)("inlineCode",{parentName:"li"},"personal_sign")," is:")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'sign(keccak256("\\x19Ethereum Signed Message:\\n" + dataToSign.length + dataToSign)))\n')),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"Make sure ",(0,s.kt)("inlineCode",{parentName:"li"},"dataToSign.length")," is length of bytes (",(0,s.kt)("inlineCode",{parentName:"li"},"Buffer"),"\nlength in some language), not UTF-8 ",(0,s.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Code_point"},"code\npoint")," length.",(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-go"},'assert.Equal(4, len([]byte("\ud83d\udc0e"))) // Not 1\n'))),(0,s.kt)("li",{parentName:"ul"},"Signature should be 65-bytes long.")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-elixir"},"<<r::binary-size(32), s::binary-size(32), v::binary-size(1)>> = signature_binary\n# v should be 0x00 or 0x01 or 0x1B or 0x1C\n# 0x00 is equivalent to 0x1B\n# 0x01 is equivalent to 0x1C\n")),(0,s.kt)("p",{parentName:"admonition"},"Here's a test case."),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-go"},'// Psuedo-code\n// Given a signature payload\npayload := "Test123123!"\n// And a secret key\nsecret_key := "0x9deba3488458c0314e5fef8920d3b117dd76415569cf270db8fd864896c02732"\n// The personal sign result should be\nassert.Equal(\n  "0x52f210dadad13c4c8d0656e7380300a367a056631cf26950baa7de4f580187795c76b5fc94de5bd0b8af4d5df432687d900402cba86a12570af56be35ba8d56401",\n  personal_sign(secret_key, payload).ToHexString()\n)\n'))),(0,s.kt)("h2",{id:"sample"},"Sample code snippets for avatar-generating and signing"),(0,s.kt)(g,{mdxType:"Tabs"},(0,s.kt)(h,{value:"rust",label:"Rust",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="Cargo.toml"',title:'"Cargo.toml"'},'[dependencies]\nlibsecp256k1 = "0.7"\nhex = "0.4"\nsha3 = "0.10" # Keccak256\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},'use libsecp256k1::{SecretKey, Message};\nuse sha3::{Keccak256, Digest};\n\nconst SECRET_KEY: &str = "9DEBA3488458C0314E5FEF8920D3B117DD76415569CF270DB8FD864896C02732";\nconst SIGN_PAYLOAD: &str = "Test123123!";\n\nfn main() {\n    // Raw sign message\n    let sign_payload: String = SIGN_PAYLOAD.to_string();\n    // SecretKey instance\n    let secret_key = SecretKey::parse_slice(hex::decode(SECRET_KEY).unwrap().as_slice()).unwrap();\n    // Sign it\n    let personal_signature = personal_sign(&sign_payload, &secret_key);\n    // Verify it\n    println!("Signature: 0x{}", hex::encode(personal_signature));\n    // Signature: 0x52f210dadad13c4c8d0656e7380300a367a056631cf26950baa7de4f580187795c76b5fc94de5bd0b8af4d5df432687d900402cba86a12570af56be35ba8d56401\n}\n\n/// `web3.eth.personal.sign()`\nfn personal_sign(payload: &String, secret_key: &SecretKey) -> Vec<u8> {\n    // Wrap personal.sign() required signature struct\n    let personal_message = format!("\\x19Ethereum Signed Message:\\n{}{}", payload.len(), payload);\n    // Keccak256 it into a digest.\n    let mut hasher = Keccak256::default();\n    hasher.update(personal_message);\n    let digest: [u8; 32] = hasher.finalize().into();\n\n    // Sign the digest.\n    let (r_and_s, v) = libsecp256k1::sign(&Message::parse(&digest), secret_key);\n    // Rebuild the sig into a [u8; 65]\n    let mut signature: Vec<u8> = vec![];\n    signature.extend_from_slice(&r_and_s.r.b32()); // r (32 bytes)\n    signature.extend_from_slice(&r_and_s.s.b32()); // s (32 bytes)\n    signature.push(v.serialize()); // v (1 byte)\n    if signature.len() != 65 {\n        panic!("Signature length is not 65 bytes");\n    }\n    signature\n}\n'))),(0,s.kt)(h,{value:"go",label:"Go",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="cmd/playground.go"',title:'"cmd/playground.go"'},'package main\n\nimport (\n    "crypto/ecdsa"\n    "fmt"\n\n    "github.com/ethereum/go-ethereum/common/hexutil"\n    "github.com/ethereum/go-ethereum/crypto"\n)\n\nconst (\n    SECRET_KEY   = "9deba3488458c0314e5fef8920d3b117dd76415569cf270db8fd864896c02732"\n    SIGN_PAYLOAD = "Test123123!"\n)\n\nfunc main() {\n    sk, err := crypto.HexToECDSA(SECRET_KEY)\n    if err != nil {\n        panic(err)\n    }\n\n    sign, err := signPersonal([]byte(SIGN_PAYLOAD), sk)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Printf("Signature: %s\\n", hexutil.Encode(sign))\n    // Signature: 0x52f210dadad13c4c8d0656e7380300a367a056631cf26950baa7de4f580187795c76b5fc94de5bd0b8af4d5df432687d900402cba86a12570af56be35ba8d56401\n}\n\n// signPersonal signs a payload using given secret key.\nfunc signPersonal(payload []byte, sk *ecdsa.PrivateKey) (signature []byte, err error) {\n    digest := signPersonalDigest(payload)\n    signature, err = crypto.Sign(digest, sk)\n    if err != nil {\n        return nil, err\n    }\n\n    return signature, nil\n}\n\n// signPersonalDigest hashes the given payload with eth.personal.sign struct.\nfunc signPersonalDigest(data []byte) []byte {\n    messsage := fmt.Sprintf("\\x19Ethereum Signed Message:\\n%d%s", len(data), data)\n    return crypto.Keccak256([]byte(messsage))\n}\n'))),(0,s.kt)(h,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="package.json"',title:'"package.json"'},'{\n  "dependencies": {\n    "ethereumjs-util": "^7.1.4"\n  }\n}\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},"import { ecsign, toRpcSig, keccakFromString } from 'ethereumjs-util'\n\nasync function personalSign(message: Buffer, privateKey: Buffer): Promise<Buffer> {\n    const messageHash = keccakFromString(`\\x19Ethereum Signed Message:\\n${message.length}${message}`, 256)\n    const signature = ecsign(messageHash, privateKey)\n    return Buffer.from(toRpcSig(signature.v, signature.r, signature.s).slice(2), 'hex')\n}\n\nasync function main() {\n    const message = Buffer.from('Test123123!', 'utf8');\n    const secretKey = Buffer.from('9deba3488458c0314e5fef8920d3b117dd76415569cf270db8fd864896c02732', 'hex');\n    const signature = await personalSign(message, secretKey);\n\n    console.log(`Signature: 0x${signature.toString('hex')}`);\n    // Signature: 0x52f210dadad13c4c8d0656e7380300a367a056631cf26950baa7de4f580187795c76b5fc94de5bd0b8af4d5df432687d900402cba86a12570af56be35ba8d5641c\n\n    console.log(`Signature(base64): ${signature.toString('base64')}`);\n    // Signature(base64): UvIQ2trRPEyNBlbnOAMAo2egVmMc8mlQuqfeT1gBh3lcdrX8lN5b0LivTV30Mmh9kAQCy6hqElcK9WvjW6jVZBw=\n}\n\nmain();\n")))),(0,s.kt)("h2",{id:"i-want-to-contribute-to-proofservice-which-platforms-do-you-accept"},"I want to contribute to ProofService, which platforms do you accept?"),(0,s.kt)("p",null,"Well, basiclly every ",(0,s.kt)("inlineCode",{parentName:"p"},"platform")," can be accepted by us if it meets the following requirement:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Identity")," (on target ",(0,s.kt)("inlineCode",{parentName:"p"},"platform"),") has the ability to post content specified by user.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"This content can be read publicly, at anytime, by anyone (human or program), after it is posted.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},'There is a mechanism to "encode" and "extract" signature into / from this content.'),(0,s.kt)("blockquote",{parentName:"li"},(0,s.kt)("p",{parentName:"blockquote"},'Depends on the shape this content represents, the mechanism to\n"extract" sig may vary. For example, assuming a ',(0,s.kt)("inlineCode",{parentName:"p"},"platform"),' which\nonly supports posting user-generated pictures, you need to find a\nway to "encode" the signature into the user-generated pic, and\nmake sure other people / program can "extract" from this pic.')),(0,s.kt)("blockquote",{parentName:"li"},(0,s.kt)("p",{parentName:"blockquote"},"The most common case is text-based content, which is the easist to\nprocess. But if there is a limitation on posting text content on\ntarget platform, you should be prepared.")))))}x.isMDXComponent=!0}}]);